{
  "hash": "e94ca22edb508ccb0bb7b9864b6d1062",
  "result": {
    "engine": "jupyter",
    "markdown": "# Matrix applications\n\n::: {#setup .cell execution_count=1}\n``` {.julia .cell-code}\n# Load packages\nusing LinearAlgebra\n```\n:::\n\n\n## Covariance\n- Covariance is the numerator of the correlation equation -- it is the dot product between two mean-centered variables -- but retains the scale of the data.\n    - Positive values indicate that they move together.\n    - Negative values indicate when they move apart.\n    - 0 indicates that there is no linear relationship\n- How it works with linear algebra:\n    1. Create a matrix where each column corresponds to each variable. Let's call a given column $X$.\n    2. To find the covariance, we can do matrix multiplication to get the dot products between them. However, we cannot do $XX$ as they won't have the right dimensions.\n    3. So, we transpose $X$ to get $X^T$.\n    4. Now, we do matrix multiplication to get $X^TX$. This generates the dot product between each column (assuming we meancentered the columns).\n    5. Then we can multiply by $\\frac{1}{n-1}$ to get the covariance matrix.\n- Summary of the steps.\n$$\nC = X^TX\\frac{1}{n-1}\n$$\n- Features of $C$:\n    - The covariance matrix will be symmetric as any matrix multiplied by its transpose produces a symmetric matrix.\n    - The diagonal elements of $C$ are the covariances for each variable with itself. So, the variance.\n\n## Geometric transformations through matrix-vector multiplication\n- Pure rotation matrices\n    - Rotates a vector but preserves its length\n    $$\n    T = \\begin{bmatrix}\n        cos(\\theta) & sin(\\theta)\\\\\n        -sin(\\theta) & cos(\\theta)\\\\\n    \\end{bmatrix}\n    $$\n    - It is a type of orthogonal matrix.\n    - How?\n        - The colums of $T$ are orthogonal as their dot product is 0\n            - Given that $cos^2(\\theta) + sin^2(\\theta) = 1$, $cos(\\theta)sin(\\theta) - sin(\\theta)cos(\\theta) = 0$\n    - To use the transofmration matrix, set $\\theta$ to some angle for clockwise rotation and multiply matrix $T$ by a $2 \\times N$ matrix of geometric points where each column are $(X, Y) corrdinates$\n## Image feature detection\n- Is an extension of time series filtering.\n    - design a Kernel and then create a time series of dot products between the kernel and the overlapping segments of the signal.\n    - Here we use 2D instead of 1D kernels and create a new image by computing the dot products between the kernel and overlapping windows of the image.\n\n",
    "supporting": [
      "ch_7_files"
    ],
    "filters": [],
    "includes": {}
  }
}