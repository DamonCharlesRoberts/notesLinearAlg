{
  "hash": "f35b55468b40a00bf261c5ef0208b825",
  "result": {
    "engine": "jupyter",
    "markdown": "# Orthogonal matrices and QR decomposition.\n\n::: {#setup .cell execution_count=1}\n``` {.julia .cell-code}\n# Load packages.\nusing LinearAlgebra\n```\n:::\n\n\n## Orthogonal matrices\n- A type of matrix that is important to many applications of statistics.\n    - Used in QR decomposition, eigendecomposition, singular value decomposition, etc.\n- Denoted as $Q$\n- Posses two properties:\n    $$\n    \\langle q_i, q_j \\rangle = \\begin{cases}\n        0\\text{,}&\\text{if }i\\neq j\\\\\n        1\\text{,}&\\text{if }i = j\\\\\n    \\end{cases}\n    $$\n    1. All columns are pair-wise orthogonal to each other (linearly independent).\n    2. The norm of each column is exactly 1.\n- A key feature of an orthogonal matrix is:\n$$\nQ^TQ = I\n$$\n    - This is the same as a matrix inverse. This means, that the inverse of an orthogonal matrix is its transpose. Since the inverse is unstable and tedius to compute, we can leverage the transpose of the orthogonal matrix to get around having to deal with matrix inverses. This means that we should be decomposing our matrices to find the orthogonal matrix of any matrix we have!\n- Examples of orthogonal matrices\n    - Identity matrix\n    - Pure rotation matrices\n    - Permutation matrices (notes on LU decomposition in next chapter)\n- To compute Orthogonal matrices from any nonorthogonal matrix, we can use QR decomposition, which is a type of the Gram-Schmidt procedure.\n\n## Gram-Schmidt procedure\n- A procedure that lets us transform nonorthogonal matrices into an orthogonal matrix.\n- It is not used very often in practice and has been expanded upon with methods like QR decomposition.\n    - This is because it requires a lot of dividing and multiplying matrices which can be numerically unstable.\n- Computing an orthogonal matrix with Gram-Schmidt from a non-orthogonal matrix, $V$ with $v_1$ through $v_n$ columns.\n    - For all $v_n$ in $V$, we use orthogonal vector decomposition. In otherwords, compute the component of $v_k$ that is perpendicular to $q_{k-1}, q_{k-2}$\n    - Normalize $v^*_k$ to unit length.\n\n## QR decomposition\n\n::: {.callout-note title=\"Definition}\n- Economy QR decomposition:\n    - We have a tall matrix and it produces a Tall Q.\n- Full QR decomposition\n    - We have have a tall matrix, but we can produce a  square Q.\n:::\n\n- Gram-Schmidt can be a bit unstable and can be really inefficient as we have to orthogonalize over all pairwise combinations of $v_n, v_{n+1}$.\n- This is an alternative way to transform a matrix into $Q$.\n$$\nA = QR\n$$\n- In the above equation, we can split $A$ into two pieces, $Q$ the orthogonal matrix and $R$. $Q$ of course loses information not related to the orthogonal part of $A$, but we want to keep that information somewhere and so we put it in $R$.\n- How do we get $R$?\n$$\n\\begin{aligned}\n    A = QR\\\\\n    Q^TA = Q^TQR\\\\\n    Q^TA = IR \\\\\n    Q^TA = R\\\\\n\\end{aligned}\n$$\n- This is really simple. We can use the nice property of $Q$ to find $R$ without needing to do any matrix inversion.\n- $Q$ will always be the maximum possible rank. The rank of $R$ is the same as the rank of $A$\n    - The difference in rank for $A$ and $Q$ is that the rank of $Q$ spans all of $\\mathbb{R}^M$ even if the column space of $A$ is a subspace of $R^M$. A key idea to why SVD is useful.\n- One property of $R$ is that it is always upper triangular.\n    - $R$ comes from $Q^TA = R$\n    - The lower triangle of a product matrix are the dot products between later rows of the left matrix and earlier columns of the right matrix.\n    - The rows of $Q^T$ are the columns of $Q$.\n    - This means that the lower triangle of $R$ comes from pairs of vectors that are orthogonalized whereas earlier columns in $Q$ are not orthogonalized to later columns of $A$ so their dot products are not zero.\n- QR decomposition is not unique for all matrix sizes and ranks. You can get multiple $Q$'s and $R$'s depending on the size of $A$. We can make it unique if we have extra constraints like positive values on the diagonals of $R$.\n\n### QR and inverses\n- Way more stable way to compute a matrix inverse:\n    - Using LIVE EVIL:\n    $$\n    \\begin{aligned}\n        A = QR \\\\\n        A^{-1} = (QR)^{-1} \\\\\n        A^{-1} = R^{-1}Q^{-1}\\\\\n        A^{-1} = R^{-1}Q^T\\\\\n    \\end{aligned}\n    $$\n    - Q is stable due to the Householder reflection algo (the transposition of $Q$ is equal to its inverse)\n    - R is stable because inverting a right-triangle uses back substitution which is really stable numerically.\n\n",
    "supporting": [
      "ch_9_files"
    ],
    "filters": [],
    "includes": {}
  }
}